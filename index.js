// Generated by CoffeeScript 1.10.0
(function() {
  var cheerio, map, parse, transform, write,
    slice = [].slice;

  cheerio = require('cheerio');

  map = require('through2-map');


  /*
  Stream-based HTML transformation library, designed for use with Gulp
  (object-mode Transform streams).
  
   * Usage
  
  gulp.src 'src/*.html'
    .pipe html.parse()
     * ready to go! now we can transform at will
    .pipe html.transform ($) ->
      $('title').text('TRANSFORMERS!')
    .pipe html.transform ($) ->
      $('link:last-of-type').after('<link href=""></link>')
     * ...pipe html.transform ad inifnitum
     * write HTML back to file when you're done
    .pipe html.write()
    .pipe gulp.dest('public')
   */

  parse = function() {
    return map.obj(function(file) {
      file.document = cheerio.load(file.contents.toString());
      return file;
    });
  };

  transform = function(fn) {
    return map.obj(function(file) {
      fn.call(this, file.document, file.path);
      return file;
    });
  };

  write = function() {
    return map.obj(function(file) {
      file.contents = new Buffer(file.document.html());
      delete file.document;
      return file;
    });
  };


  /*
   * Transformers
  
  A number of built-in transformers to simplify the process.
  
  [Cheerio](https://github.com/cheeriojs/cheerio) is used internally to
  parse the file, and can be used by you to transform it! Have access to
  the entire document, or use helpers for common operations.
   */

  transform.contents = function() {
    var selectors;
    selectors = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return transform(function($) {
      return $('body').html($(selectors.join(', d')));
    });
  };

  transform.each = function(selector, fn) {
    return transform(function($, filename) {
      var ctx;
      ctx = this;
      return $(selector).each(function() {
        return fn.call(ctx, $(this), filename);
      });
    });
  };

  transform.replace = function(selector, attr, find, replace) {
    return transform.each(selector, function($el) {
      var ref;
      return $el.attr(attr, (ref = $el.attr(attr)) != null ? ref.replace(find, replace) : void 0);
    });
  };

  transform.invoke = function() {
    var args, methodName, selector;
    selector = arguments[0], methodName = arguments[1], args = 3 <= arguments.length ? slice.call(arguments, 2) : [];
    return tranform.each(selector, function($el) {
      return $el[methodName].apply($el, args);
    });
  };

  module.exports = {
    parse: parse,
    transform: transform,
    write: write
  };

}).call(this);
